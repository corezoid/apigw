global:
  # second level domain only! / core domain (example: example.com)
  domain: "example.com"
  # subdomain / sitename - prod.example.com (example: prod), if no sub-domain, then set blank (subdomain: "")
  subdomain: "prod"
  # Enable or disable Service or Pod Monitor, if not set then use serviceMonitor.enabled: false
  serviceMonitor:
    enabled: true
  # Dashboard configuration for deploying Grafana dashboards for ApiGW
  dashboards:
    # -- If enabled, Grafana dashboards are deployed
    enabled: false
    # -- Annotations to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, annotation should be provided to place dashboards in proper folder.
    # From observability chart, value from grafana.sidecar.dashboards.folderAnnotation is a
    # "key" for annotation, and value is a name of folder which will be created in Grafana UI for ApiGW dashboards.
    annotations: {}
    # -- Labels to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, labels should be provided to discovery
    # dashboards and upload them to grafana. From observability chart, value from grafana.sidecar.dashboards.label is a key,
    # and grafana.sidecar.dashboards.labelValue is a value for that label.
    # So, label should looks like grafana.sidecar.dashboards.label:grafana.sidecar.dashboards.labelValue
    labels: {}
  alerts:
    # - If true, deploys alertmanager alerts and rules for ApiGW.
    enabled: false
    # -- PrometheusRule annotations
    annotations: {}
    # -- Additional PrometheusRule labels.
    #Note: If using with middleware observability platform, to find out what your CRD expects,
    # track k8s-monitoring.extraConfig param for mimir.rules.kubernetes.rule_selector component block at observability chart.
    # Ref: https://git.corezoid.com/devops/kubernetes/helm/observability/observability
    labels: {}
    # -- prometheusRule namespace. If using with middleware observability platform, to find out what your CRD expects,
    # track k8s-monitoring.extraConfig param for mimir.rules.kubernetes.rule_namespace_selector component block at observability chart.
    # Ref: https://git.corezoid.com/devops/kubernetes/helm/observability/observability
    namespace: ""

  imageRegistry: hub.corezoid.com
  imagePullPolicy: Always
  repotype: public
  deploymentStrategy:
    type: RollingUpdate
  product: "api-gw"
  imageInit:
    repository: hub.corezoid.com/hub.docker.com/library/alpine
    pullPolicy: IfNotPresent
    tag: "3.20.1"
  apigw:
    connect_enabled: true
    secret:
      postgres:
        annotations: {}
    apigw_app:
      # Can set imagePullPolicy for application image only, or use from .global
      # imagePullPolicy: IfNotPresent
      minReplicas: 2
      maxReplicas: 4
      resources: {}
      # resources:
      #   limits:
      #     memory: 500Mi
      #   requests:
      #     cpu: 200m
      #     memory: 200Mi
      config:
        log_level: 'info'
        sync_api_server:
          listen_port: 8081
        callback_server:
          aes_key: 'AES_KEY'
          aes_nonce: 'AES_NONCE'
          host: '${APIGW_CALLBACK_SERVER_HOST}'
          port: 0
          schema: 'https'
          base_path: '/callback'
          internal_host: '${INTERNAL_HOST}'
          listen_host: '0.0.0.0'
          listen_port: 8070
          read_timeout_sec: 30
        postgres:
          host: '${APIGW_POSTGRESQL_HOST}'
          port: 5432
          database: 'apigw'
          user: '${APIGW_POSTGRESQL_USERNAME}'
          password: '${APIGW_POSTGRESQL_PASSWORD}'
          ssl:
            enabled: false
        postgres_settings:
          host: '${APIGW_POSTGRESQL_SETTINGS_HOST}'
          port: 5432
          database: '${APIGW_POSTGRESQL_SETTINGS_NAME}'
          user: '${APIGW_POSTGRESQL_SETTINGS_USERNAME}'
          password: '${APIGW_POSTGRESQL_SETTINGS_PASSWORD}'
          ssl:
            enabled: false
        redis:
          host: '${APIGW_REDIS_HOST}'
          port: 6379
          database: 0
          password: '${APIGW_REDIS_PASSWORD}'
        single_account:
          enabled: true
          http_host: 'https://${APIGW_SA_HOST}'
          # Single-account client id, check README.md file
          client_id: 'SA_CLIENT_ID'
          # Single-account client secret, check README.md file
          client_secret: 'SA_CLIENT_SECRET'
          redirect_http_host: 'https://${APIGW_FRONTEND_HOST}/'
          admin_bearer_token_secret: "ADMIN_BEARER_TOKEN_SECRET"
        api_server:
          listen_host: '0.0.0.0'
          listen_port: 8080
          cors:
            allowed_origins: ['*']
        proxy_server:
          listen_host: '0.0.0.0'
          listen_port: 8090
          host: '${APIGW_PROXY_SERVER_HOST}'
          host_delimiter: '.'
          ready_path: '/ready'
          corezoid:
            http_host: 'https://${APIGW_COREZOID_HOST}'
          cors:
            allowed_origins: ['*']
          # Set false for new install, for old install with Sync-APi set true
          use_deprecated_task_format: false
        # if set will as Tasks manager too.
        task_api_server:
          listen_port: 8082
        health_server:
          listen_host: '0.0.0.0'
          listen_port: 8060
        metrics:
          listen_port: 9100
        connect_server:
          tunnel:
            listen_port: 8888
          proxy:
            host: 'https://*.${APIGW_CONNECT_SERVER_TUNNEL_HOST}'
            listen_port: 8887
      # Sub-domian for APIGW callback-server
      callback_server_subDomain: "cb-apigw"
      # Sub-domian for APIGW server-server, e.g. *.apigw.example.com
      proxy_server_subDomain: "apigw"
      # Sub-domian for APIGW api
      api_server_subDomain: "api-apigw"
      # Sub-domian for APIGW frontend
      frontend_subDomain: "apigw"
      # Sub-domian for APIGW SyncAPI
      sync_subDomain: "sync-apigw"
      connect_server_tunnel_subDomain: "connect"
      connect_server_proxy_subDomain: "*.connect"
      # if set config.task_api_server then need set subDomain for Tasks manager
      task_api_server_subDomain: "task-apigw"
      serviceAccount:
        create: true
        # You can provide your serviceAccount name to use, also set create to false
        # name: ""
        annotations: {}
  sa:
    # Sub-domian for Single-Account service
    subDomain: "account"
  db:
    internal: false
    secret:
      # true - secret will be created automaticaly with provided values
      # false - secret should be created manualy
      name: "postgresql-secret"
      create: true
      data:
        # PostgreSQL database address
        dbhost: "DB_HOST"
        # PostgreSQL database port
        dbport: "5432"
        # PostgreSQL database application username
        dbuser: "apigw_user"
        # PostgreSQL database application password
        dbpwd: "APP_DB_PASSWORD"
    bouncer: false
    bouncer_minReplicas: 1
    bouncer_maxReplicas: 2
    bouncer_resources:
      limits:
        cpu: "500m"
        memory: "500Mi"
      requests:
        cpu: "100m"
        memory: "100Mi"
    bouncer_log_level: debug
  db_settings:
    internal: false
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      name: "postgresql-settings-secret"
      create: true
      data:
        dbhost: "DB_HOST"
        dbport: "5432"
        dbname: "settings"
        dbuser: "COREZOID_DB_USER"
        dbpwd: "COREZOID_DB_PASSWORD"
  redis:
    internal: true
    secret:
      name: "redis"
      create: true
      data:
        host: "apigw-redis-service"
        port: "6379"
        password: "REDIS_PASSWORD"
  valkey: {}
  ingress:
    className: nginx
    annotations: {}
    # annotations:
    #   ingress.class: nginx
    #   nginx.ingress.kubernetes.io/proxy-body-size: 3m
  kube:
    affinity: {}
  apigw_app:
    tag: 1.9.2
