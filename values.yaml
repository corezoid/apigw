global:
  # second level domain only! / core domain (example: example.com)
  domain: "example.com"
  # subdomain / sitename - prod.example.com (example: prod), if no sub-domain, then set blank (subdomain: "")
  subdomain: "prod"
  imageRegistry: docker-hub.middleware.biz
  imagePullPolicy: Always
  repotype: public
  # Enable or disable Service or Pod Monitor, if not set then use serviceMonitor.enabled: false
  serviceMonitor:
    enabled: false
  deploymentStrategy:
    type: RollingUpdate
  product: "api-gw"
  apigw:
    secret:
      postgres:
        annotations: {}
    apigw_app:
      # Can set imagePullPolicy for application image only, or use from .global
      # imagePullPolicy: IfNotPresent
      minReplicas: 2
      maxReplicas: 4
      resources:
        limits:
          memory: 500Mi
        requests:
          cpu: 200m
          memory: 200Mi
      config:
        sync_api_server:
          listen_port: 8081
        callback_server:
          aes_key: 'AES_KEY'
          aes_nonce: 'AES_NONCE'
          host: '${APIGW_CALLBACK_SERVER_HOST}'
          port: 0
          schema: 'https'
          base_path: '/callback'
          internal_host: '${INTERNAL_HOST}'
          listen_host: '0.0.0.0'
          listen_port: 8070
          read_timeout_sec: 30
        postgres:
          host: '${APIGW_POSTGRESQL_HOST}'
          port: 5432
          database: 'apigw'
          user: '${APIGW_POSTGRESQL_USERNAME}'
          password: '${APIGW_POSTGRESQL_PASSWORD}'
          ssl:
            enabled: false
        redis:
          host: '${APIGW_REDIS_HOST}'
          port: 6379
          database: 0
          password: '${APIGW_REDIS_PASSWORD}'
        single_account:
          enabled: true
          http_host: 'https://${APIGW_SA_HOST}'
          # Single-account client id, check README.md file
          client_id: 'SA_CLIENT_ID'
          # Single-account client secret, check README.md file
          client_secret: 'SA_CLIENT_SECRET'
        api_server:
          listen_host: '0.0.0.0'
          listen_port: 8080
          cors:
            allowed_origins: ['*']
        proxy_server:
          listen_host: '0.0.0.0'
          listen_port: 8090
          host: '${APIGW_PROXY_SERVER_HOST}'
          host_delimiter: '.'
          ready_path: '/ready'
          corezoid:
            http_host: 'https://${APIGW_COREZOID_HOST}'
          cors:
            allowed_origins: ['*']
          use_deprecated_task_format: true
        health_server:
          listen_host: '0.0.0.0'
          listen_port: 8060
        metrics:
          listen_port: 9100
      # Sub-domian for APIGW callback-server
      callback_server_subDomain: "cb-apigw"
      # Sub-domian for APIGW server-server, e.g. *.apigw.example.com
      proxy_server_subDomain: "apigw"
      # Sub-domian for APIGW api
      api_server_subDomain: "api-apigw"
      # Sub-domian for APIGW frontend
      frontend_subDomain: "apigw"
      # Sub-domian for APIGW SyncAPI
      sync_subDomain: "sync-apigw"
  sa:
    # Sub-domian for Single-Account service
    subDomain: "account"
  db:
    internal: false
    secret:
    # true - secret will be created automaticaly with provided values
    # false - secret should be created manualy
      name: "postgresql-secret"
      create: true
      data:
        # PostgreSQL database address
        dbhost: "DB_HOST"
        # PostgreSQL database port
        dbport: "5432"
        # PostgreSQL database application username
        dbuser: "apigw_user"
        # PostgreSQL database application password
        dbpwd: "APP_DB_PASSWORD"
  db_settings:
    internal: false
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      name: "postgresql-settings-secret"
      create: true
      data:
        dbhost: "DB_HOST"
        dbport: "5432"
        dbname: "settings"
        dbuser: "COREZOID_DB_USER"
        dbpwd: "COREZOID_DB_PASSWORD"
  redis:
    internal: true
    secret:
      name: "redis"
      create: true
      data:
        host: "apigw-redis"
        port: "6379"
        password: "REDIS_PASSWORD"
  ingress:
    className: nginx
    annotations:
      ingress.class: nginx
      # nginx.ingress.kubernetes.io/configuration-snippet: |
      #   more_set_headers X-Content-Type-Options "nosniff" always;
      #   more_set_headers X-Frame-Options "SAMEORIGIN" always;
      #   add_header X-Content-Type-Options nosniff;
      #   more_set_headers Referrer-Policy "no-referrer-when-downgrade" always;
      #   more_set_headers "Content-Security-Policy: default-src 'self' blob: 'unsafe-inline' 'unsafe-eval' data: INSERT_DOMIANS_HERE";
  kube:
    affinity: {}
