{{- if eq .Values.global.redis.internal true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Values.appName }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "redis.labels" . | nindent 6 }}
      role: master
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-redis.yaml") . | sha256sum }}
      labels:
        {{- include "redis.labels" . | nindent 8 }}
        role: master
    spec:
      {{- if not (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecrets.name }}
      {{- end }}
      containers:
      - name: master
        {{- if .Values.global.arm64 }}
        image: "{{ .Values.image.registry }}/public/arm64/redis:{{ .Values.image.tag }}"
        {{- else }}
        image: "{{ .Values.image.registry }}{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- end }}
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 50m
            memory: 100Mi
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - "redis-cli -h localhost ping"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - "redis-cli -h localhost ping"
          initialDelaySeconds: 20
          periodSeconds: 3
        ports:
        - name: app
          containerPort: {{ .Values.appPort }}
          protocol : TCP
        volumeMounts:
          - name: redisconfig
            mountPath: /usr/local/etc/redis
      volumes:
        - name: redisconfig
          configMap:
            name: {{ .Release.Name }}-{{ .Values.appName }}-config

{{- end }}
